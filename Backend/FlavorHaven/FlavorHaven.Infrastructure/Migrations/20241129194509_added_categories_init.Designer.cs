// <auto-generated />
using System;
using FlavorHaven.Infrastructure.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlavorHaven.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241129194509_added_categories_init")]
    partial class added_categories_init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.DishCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DishCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70453c1c-7723-4caa-93b6-7457ddd03d7a"),
                            IsDeleted = false,
                            Name = "Японская кухня"
                        },
                        new
                        {
                            Id = new Guid("e5c45cbb-d201-4841-ace2-2128b8c5cbb0"),
                            IsDeleted = false,
                            Name = "Итальянская кухня"
                        },
                        new
                        {
                            Id = new Guid("c9eeb335-395c-43ed-af33-57a47667c6e9"),
                            IsDeleted = false,
                            Name = "Французская кухня"
                        },
                        new
                        {
                            Id = new Guid("bc53d280-fbd1-4e0f-9543-c4c0137d1ac0"),
                            IsDeleted = false,
                            Name = "Мексиканская кухня"
                        },
                        new
                        {
                            Id = new Guid("e41ced16-057c-464d-8c56-5ebd1ae9dec3"),
                            IsDeleted = false,
                            Name = "Индийская кухня"
                        },
                        new
                        {
                            Id = new Guid("720ca151-d4d7-42f5-9e0d-3de725053d98"),
                            IsDeleted = false,
                            Name = "Китайская кухня"
                        },
                        new
                        {
                            Id = new Guid("e7a04a14-687b-4b73-937c-b87a767cfe4f"),
                            IsDeleted = false,
                            Name = "Тайская кухня"
                        },
                        new
                        {
                            Id = new Guid("bc8d82f4-a7ef-4f3f-aea2-80dbdf87696f"),
                            IsDeleted = false,
                            Name = "Грузинская кухня"
                        },
                        new
                        {
                            Id = new Guid("aeee7525-9d70-43c2-8f16-74298924edf7"),
                            IsDeleted = false,
                            Name = "Белорусская кухня"
                        },
                        new
                        {
                            Id = new Guid("1ec3e532-c811-4ced-bd25-ff16e09a99c4"),
                            IsDeleted = false,
                            Name = "Русская кухня"
                        },
                        new
                        {
                            Id = new Guid("25069d7e-7986-45fe-ab91-325d67d7fe41"),
                            IsDeleted = false,
                            Name = "Вьетнамская кухня"
                        },
                        new
                        {
                            Id = new Guid("161e8fbe-ee11-415d-96b7-5d9089922164"),
                            IsDeleted = false,
                            Name = "Корейская кухня"
                        },
                        new
                        {
                            Id = new Guid("77d8e241-21a6-416e-803d-f612dcbcd6f1"),
                            IsDeleted = false,
                            Name = "Американская кухня"
                        },
                        new
                        {
                            Id = new Guid("d967c534-637e-4dd8-af4c-ebe38fe72ea8"),
                            IsDeleted = false,
                            Name = "Испанская кухня"
                        },
                        new
                        {
                            Id = new Guid("2c6706f0-601a-488a-a905-08e96647eda9"),
                            IsDeleted = false,
                            Name = "Средиземноморская кухня"
                        });
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.OrderItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2314de32-2e86-4869-8008-8eb828cf7887"),
                            IsDeleted = false,
                            Name = "Created"
                        },
                        new
                        {
                            Id = new Guid("7fbb8085-62f3-490d-8e7e-dbd437aae744"),
                            IsDeleted = false,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = new Guid("7b05f88b-5cd4-4ed8-aa22-52c4a08be24a"),
                            IsDeleted = false,
                            Name = "Cooking"
                        },
                        new
                        {
                            Id = new Guid("5cd95ec8-2ea3-4550-be1f-b1e4aa19db2f"),
                            IsDeleted = false,
                            Name = "Ready"
                        },
                        new
                        {
                            Id = new Guid("81881342-49e3-4f7c-8eeb-1042b1a7aa67"),
                            IsDeleted = false,
                            Name = "Delivering"
                        },
                        new
                        {
                            Id = new Guid("eae2cd85-da94-4253-8570-3f69eecc1e56"),
                            IsDeleted = false,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("099ed6ad-4323-40e8-ab4f-5af05032003e"),
                            IsDeleted = false,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("583e1840-ba88-418d-ae9e-4ce7571f0946"),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("f0edc8bb-415b-4fa6-bd39-4ea1b88193f1"),
                            IsDeleted = false,
                            Name = "Resident"
                        });
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd65e7bd-e25a-4935-81d1-05093b5f48c0"),
                            Balance = 0m,
                            Email = "admin@gmail.com",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$VeYQU5caDBo7XBTCm2t/EunaNEeUNrXzT4.ETclhhubiPFq4izKE6",
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5bdd7d3f-2830-496e-9279-22d10991135b"),
                            IsDeleted = false,
                            RoleId = new Guid("583e1840-ba88-418d-ae9e-4ce7571f0946"),
                            UserId = new Guid("bd65e7bd-e25a-4935-81d1-05093b5f48c0")
                        });
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Cart", b =>
                {
                    b.HasOne("FlavorHaven.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlavorHaven.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Dish", b =>
                {
                    b.HasOne("FlavorHaven.Domain.Entities.DishCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Order", b =>
                {
                    b.HasOne("FlavorHaven.Domain.Entities.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlavorHaven.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.OrderItems", b =>
                {
                    b.HasOne("FlavorHaven.Domain.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlavorHaven.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Review", b =>
                {
                    b.HasOne("FlavorHaven.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlavorHaven.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlavorHaven.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
